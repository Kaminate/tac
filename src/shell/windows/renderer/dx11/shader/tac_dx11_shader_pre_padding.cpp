#include "src/shell/windows/renderer/dx11/shader/tac_dx11_shader_preprocess.h" // self-inc

#include "src/common/string/tac_string.h" // String
#include "src/common/preprocess/tac_preprocessor.h"

namespace Tac::Render
{
  static int GetPadByteCount( const StringView& line )
  {
    String numberStr;

    // Compiler literally decides to skip the string if we leave out these curly brackets
    for( char c : line )
    {
      if( IsDigit( c ) )
      {
        numberStr += c;
      }
    }

    TAC_ASSERT( !numberStr.empty() );

    const int padByteCount = Atoi( numberStr );
    TAC_ASSERT( padByteCount );
    TAC_ASSERT( padByteCount % 4 == 0 ); // <-- why?
    return padByteCount;
  }

  String PreprocessShaderPadding( const StringView& line )
  {
    const int iPad = line.find( "TAC_PAD_BYTES" );
    if( iPad == line.npos )
      return line;

    const int padByteCount = GetPadByteCount( line );

    static int padCounter;

    const String spaces( iPad, ' ' );

    String result;
    for( int i = 0; i < padByteCount / 4; ++i )
    {
      const char* separator = i ? "\n" : "";
      const String varName = "pad" + ToString( padCounter++ );

      result += separator;
      result += spaces + "uint ";
      result += varName;
      result += "; // Padding autogenerated by " + String( __FUNCTION__ );
    }

    return result;
  }
} // namespace Tac::Render

