#include "src/shell/windows/renderer/dx11/shader/tac_dx11_shader_preprocess.h" // self-inc

#include "src/common/string/tac_string.h" // String
#include "src/common/dataprocess/tac_text_parser.h" // ParseData
#include "src/common/string/tac_string_format.h"
#include "src/common/containers/tac_array.h" // Array

namespace Tac::Render
{

  // The shader register map is used in conjunction with the TAC_AUTO_REGISTER shader macro
  // to assign unique registers to each shader resource.
  struct ShaderRegisterMap
  {
    // c - The resource type name ( 
    // n - The resources count
    // 
    // ex 1: Texture2D shadowMaps[ 4 ] : TAC_AUTO_REGISTER;
    //       This results in Add( 't', 4 )
    //
    // ex 2: cbuffer CBufferLights : TAC_AUTO_REGISTER;
    //       This results in Add( 'b', 1 )
    // 
    // The return value is the register assigned to each resource.
    int Add( char c, int n );

  private:
    Array< int, 128 > mLetterCounts;
  };

  // -----------------------------------------------------------------------------------------------

  int ShaderRegisterMap::Add( char c, int n )
  {
    const int iResource = mLetterCounts[ c ];
    mLetterCounts[ c ] += n;
    return iResource;
  }

  // -----------------------------------------------------------------------------------------------
  
  static ShaderRegisterMap sShaderRegisterMap;

  void ResetShaderRegisters()
  {
    sShaderRegisterMap = {};
  }

  static int GetRegisterCount(StringView line )
  {
      const int iOpen = line.find( '[' );
      const int iClose = line.find( ']' );
      if( iOpen == line.npos || iClose == line.npos )
        return 1;
      return ( int )ParseData( line.data() + iOpen + 1,
                               line.data() + iClose ).EatFloat().GetValueUnchecked();
  }

  static char GetResourceLetter( const StringView& line )
  {
    ParseData parseData( line );
    parseData.EatWhitespace();

    const struct
    {
      const char* mName;
      char mLetter;
    } resourceMap[] =
    {
      { "Texture2D", 't'},
      { "Texture3D", 't'},
      { "cbuffer", 'b'},
      { "sampler", 's'},
    };

    for( auto [name, letter] : resourceMap )
      if( parseData.PeekStringExpected( name ) )
        return letter;

    return ( char )0;
  }

  String PreprocessShaderRegister( const StringView& line )
  {
    const StringView autoRegister = "TAC_AUTO_REGISTER";
    const int iReplace = line.find( autoRegister );
    if( iReplace == line.npos )
      return line;

    const int regCount = GetRegisterCount( line );
    const char letter = GetResourceLetter( line );
    TAC_ASSERT( letter );

    const int iResource = sShaderRegisterMap.Add( letter, regCount );
    const auto registerStr = String() +
      "register(" + ToString( letter ) + ToString( iResource ) + " )";

    String result;
    result += "// Autogenerated register from ";
    result += __FUNCTION__;
    result += '\n';
    result += line.substr( 0, iReplace ); // everthing before TAC_AUTO_REGISTER
    result += registerStr;
    result += line.substr( iReplace + autoRegister.size() ); // everything after TAC_AUTO_REGISTER
    return result;
  }
} // namespace Tac::Render



