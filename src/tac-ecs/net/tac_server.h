#pragma once

#include "tac-ecs/tac_space_types.h"
#include "tac-ecs/net/tac_space_net.h"
#include "tac-ecs/tac_space.h"
#include "tac-std-lib/containers/tac_vector.h"
#include "tac-std-lib/containers/tac_list.h"
#include "tac-engine-core/shell/tac_shell_timestep.h"

namespace Tac
{
  struct OtherPlayer
  {
    // A unique ID per players
    // ( both client players and server player ).
    // Generated by the server
    PlayerUUID     mPlayerUUID     { NullPlayerUUID };
    // Last acknowledged
    Timestamp      mTimeStamp      {};
    LagTest        delayedNetMsg   {};
    ConnectionUUID mConnectionUUID { NullConnectionUUID };
  };

  typedef void( *ServerSendNetworkMessageCallback )( ConnectionUUID,
                                                     const void* bytes,
                                                     int byteCount,
                                                     void* userData );

  struct ServerData
  {
    ServerData();
    ~ServerData();

    Entity*                   SpawnEntity();
    Player*                   SpawnPlayer();

    void                      OnClientJoin( ConnectionUUID );

    void                      DebugImgui();

    OtherPlayer*              FindOtherPlayer( ConnectionUUID );

    void                      ReceiveMessage( ConnectionUUID,
                                              void* bytes,
                                              int byteCount,
                                              Errors& );

    void                      Update( float seconds,
                                      ServerSendNetworkMessageCallback,
                                      void* userData,
                                      Errors& );

    void                      OnLoseClient( ConnectionUUID );

    void                      ReadInput( ReadStream*,
                                         ConnectionUUID,
                                         Errors& );

    void                      WriteSnapshotBody( OtherPlayer*, WriteStream* );

    void                      ExecuteNetMsg( ConnectionUUID,
                                             const void* bytes,
                                             int byteCount,
                                             Errors& );

    SnapshotBuffer            mSnapshots                   {};
    float                     mSnapshotUntilNextSecondsCur {};
    World*                    mWorld                       {};
    World*                    mEmptyWorld                  {};
    static const int          sOtherPlayerCountMax         { 3 };
    List< OtherPlayer* >      mOtherPlayers                {};
    //PlayerUUID                mPlayerUUIDCounter { NullPlayerUUID };
    //EntityUUID                mEntityUUIDCounter { NullEntityUUID };
    PlayerUUIDCounter         mPlayerUUIDCounter           {};
    EntityUUIDCounter         mEntityUUIDCounter           {};
  };

  extern const float sSnapshotUntilNextSecondsMax;
}

