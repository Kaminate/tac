# src\creation

if( ( NOT WIN32 ) AND ( NOT UNIX ) )
  return()
endif()

set( TAC_DEBUGGING FALSE )
set( TAC_LIBRARIES
  CommonLibrary 
  Ghost
   )
set( TAC_INCLUDE_DIRECTORIES "" )
set( TAC_SOURCES "" )
set( TAC_EXE_NAME "Creation" )
set( TAC_SOURCES 
  ${TAC_SOURCES}
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation.cpp"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation.h"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_asset_view.cpp"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_asset_view.h"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_prefab.cpp"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_prefab.h"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_game_object_menu_window.cpp"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_game_object_menu_window.h"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_game_window.cpp"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_game_window.h"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_main_window.cpp"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_main_window.h"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_profile_window.cpp"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_profile_window.h"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_property_window.cpp"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_property_window.h"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_system_window.cpp"
  "${CMAKE_CURRENT_SOURCE_DIR}/tac_creation_system_window.h"
  )
set( TAC_SOURCES ${TAC_SOURCES} ${TAC_DESKTOP_APP_FILES})
if( WIN32 )

  # Add the shader files to the Visual Studio Solution Explorer under the 'shaders' filter
  set( TAC_SOURCES ${TAC_SOURCES} ${TAC_SHADERS} )
  source_group("shaders" FILES ${TAC_SHADERS})

  set( TAC_SOURCES ${TAC_SOURCES} ${TAC_WIN_LIB_FILES} )
endif()


# note: variables names are case-sensitive

find_package( OpenGL )
if( OPENGL_FOUND )
  set( TAC_SOURCES
    ${TAC_SOURCES}
    ${OPENGL_INCLUDE_DIR}
    "${CMAKE_SOURCE_DIR}/include/GL/gl3w.h"
    "${CMAKE_SOURCE_DIR}/include/GL/glcorearb.h"
    "${CMAKE_SOURCE_DIR}/include/KHR/khrplatform.h"
    "${CMAKE_SOURCE_DIR}/src/shell/opengl/autogenerated/gl3w.cpp"
    "${CMAKE_SOURCE_DIR}/src/shell/opengl/tac_renderer_opengl4.cpp"
    "${CMAKE_SOURCE_DIR}/src/shell/opengl/tac_renderer_opengl4.h"
    )
  if( WIN32 AND FALSE )
    set( TAC_SOURCES
      ${TAC_SOURCES}
      "${CMAKE_SOURCE_DIR}/src/shell/windows/tac_renderer_opengl4_win32.cpp" )
  endif()
  set( TAC_LIBRARIES ${TAC_LIBRARIES} OpenGL::GL  )
endif()

find_package( Vulkan )
if( Vulkan_FOUND )
  set( TAC_SOURCES
    ${TAC_SOURCES}
    ${Vulkan_INCLUDE_DIRS}
    "${CMAKE_SOURCE_DIR}/src/shell/vulkan/tac_renderer_vulkan.cpp"
    "${CMAKE_SOURCE_DIR}/src/shell/vulkan/tac_renderer_vulkan.h" )
  if( WIN32 AND FALSE)
    set( TAC_SOURCES
      ${TAC_SOURCES}
      "${CMAKE_SOURCE_DIR}/src/shell/windows/tac_renderer_vulkan_win32.cpp" )
  endif()
  set( TAC_LIBRARIES ${TAC_LIBRARIES} Vulkan::Vulkan  )
endif()

set( TAC_INCLUDE_DIRECTORIES "" )
set( TAC_INCLUDE_DIRECTORIES
    ${TAC_INCLUDE_DIRECTORIES}
    "${CMAKE_SOURCE_DIR}/include"
    "${CMAKE_SOURCE_DIR}/src" )

set( TAC_SOURCES_BASE ${TAC_SOURCES} )
set( TAC_LIBRARIES_BASE ${TAC_LIBRARIES} )
set( TAC_INCLUDE_DIRECTORIES_BASE ${TAC_INCLUDE_DIRECTORIES} )

# cached variables are bullshit ( can't get cleared in a parent scope from inside a function? )
# properties suck
# ...guess we just goota use PARENT_SCOPE
function( tac_target TAC_TARGET_SUFFIX )
  # okay so like functions open up a new scope
  # this means we can't set variables normally
  # thus, everything is global
  set( TAC_TARGET_NAME "${TAC_EXE_NAME}${TAC_TARGET_SUFFIX}" PARENT_SCOPE )
  set( TAC_INCLUDE_DIRECTORIES ${TAC_INCLUDE_DIRECTORIES_BASE} PARENT_SCOPE )
  set( TAC_SOURCES  ${TAC_SOURCES_BASE} PARENT_SCOPE )
  set( TAC_LIBRARIES ${TAC_LIBRARIES_BASE} PARENT_SCOPE )
endfunction()

find_package( SDL2 )
if( SDL2_FOUND )
  tac_target( "SDL" )
  find_package( SDL2 REQUIRED )
  set( TAC_INCLUDE_DIRECTORIES ${TAC_INCLUDE_DIRECTORIES} ${SDL2_INCLUDE_DIR} )
  include_directories( ${TAC_INCLUDE_DIRECTORIES} )

  set( TAC_SOURCES ${TAC_SOURCES} ${TAC_SDL_MAIN_FILES} )

  # Add the dl library for linux (dlopen, dlclose) used by gl3w.cpp
  find_library( DL_LIBS ${CMAKE_DL_LIBS} )
  if( DL_LIBS )
    message("found dl libs")
    set( TAC_LIBRARIES ${TAC_LIBRARIES} ${DL_LIBS} )
  else()
    message("found no dl libs")
  endif()

  message("tac target name: ${TAC_TARGET_NAME}")
  
  # the win32 here changes the
  # configuration properties --> linker --> system --> subsystem
  # from console to windows, which makes the console window go away
  #
  # If this is a unix build, will the WIN32 here fuck everything up?
  if(WIN32)
    add_executable( ${TAC_TARGET_NAME} WIN32 ${TAC_SOURCES} )
  else()
    add_executable( ${TAC_TARGET_NAME} ${TAC_SOURCES} )
  endif()

  set( TAC_LIBRARIES ${TAC_LIBRARIES} ${SDL2_LIBRARY} )

  # this was missing before, right?
  target_link_libraries( ${TAC_TARGET_NAME} ${TAC_LIBRARIES} )

  set_target_properties( ${TAC_TARGET_NAME} PROPERTIES OUTPUT_NAME "${TAC_EXE_NAME}" )
  set_target_properties( ${TAC_TARGET_NAME} PROPERTIES
    VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
    VS_STARTUP_PROJECT ${TAC_TARGET_NAME}
    LINKER_LANGUAGE CXX )

  # When we run the exe, it needs sdl2.dll to function ( not to compile )
  # As a post-build step, copy sdl2.dll to the exe output directory.
  # SDL2_LIBRARY contains comma-separated filepaths to sdl2main.lib and sdl2.lib
  # ( comma separated items denote a list in cmake )

  if( ${TAC_DEBUGGING} )
    message( "sdl2 libraries: ${SDL2_LIBRARY}")
  endif()

  list( GET SDL2_LIBRARY 0 SDL_FIRST_LIBRARY)
  get_filename_component( SDL_DLL_FOLDER ${SDL_FIRST_LIBRARY} DIRECTORY )
  set( SDL2_DLL_FULL_NAME "${SDL_DLL_FOLDER}/SDL2.dll" )

  if( ${TAC_DEBUGGING} )
    message( "sdl2 first library: ${SDL_FIRST_LIBRARY}")
    message( "sdl2 dll folder: ${SDL_DLL_FOLDER}")
    message( "sdl2 dll full name: ${SDL2_DLL_FULL_NAME}")
  endif()


if(WIN32)

  # CMAKE_COMMAND is the full path to the cmake executable
  # -E invokes command line tool mode
  # https://cmake.org/cmake/help/latest/manual/cmake.1.html
  #
  # In visual studio, this takes the form as a Post-Build Event
  ADD_CUSTOM_COMMAND(TARGET ${TAC_TARGET_NAME}
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
      ${SDL2_DLL_FULL_NAME}
      $<TARGET_FILE_DIR:${TAC_TARGET_NAME}>)
  endif()
else()
endif()


if( WIN32 )
  tac_target( "Win32" )
  set( TAC_SOURCES ${TAC_SOURCES} ${TAC_WIN_MAIN_FILES})
  include_directories( ${TAC_INCLUDE_DIRECTORIES} )

  # Program Database for Edit & Continue
  add_definitions(/ZI)

  # the win32 here changes the
  # configuration properties --> linker --> system --> subsystem
  # from console to windows, which makes the console window go away
  add_executable( ${TAC_TARGET_NAME} WIN32 ${TAC_SOURCES} )
  target_link_libraries( ${TAC_TARGET_NAME} ${TAC_LIBRARIES} )
  set_target_properties( ${TAC_TARGET_NAME} PROPERTIES
    VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}"
    VS_STARTUP_PROJECT ${TAC_TARGET_NAME}
    OUTPUT_NAME "${TAC_EXE_NAME}"
    LINKER_LANGUAGE CXX )

endif()


