#include "tac_color.h" // self-inc

#include "tac-std-lib/math/tac_math.h" // Pow, Exp


namespace Tac
{
  Blackbody::Blackbody( Params p )
  {
    const float lambda { p.mLambaWavelengthNanometers };
    const float T { p.mTemperatureInKelvin };
    const float c { 299792458.f };
    const float h { 6.62606957e-34f };
    const float kb { 1.3806488e-23f };
    const float l { lambda * 1e-9f };
    const float Le
    {
                          ( 2 * h * c * c )
      / // ------------------------------------------------------
      ( Pow( l, 5 ) * ( Exp( ( h * c ) / ( l * kb * T ) ) - 1 ) )
    };
    mRadiance = Le;
  };

  DenseSpectrum Blackbody::TemperatureToSpectrum(float temperatureInKelvin)
  {
    DenseSpectrum denseSpectrum;
    for( int i{}; i < DenseSpectrum::kSampleCount; ++i)
    {
      const Blackbody::Params params
      {
        .mLambaWavelengthNanometers { ( float )( i + DenseSpectrum::kLambdaMin ) },
        .mTemperatureInKelvin       { temperatureInKelvin },
      };
      denseSpectrum.mValues[ i ] = Blackbody( params );
    }
    return denseSpectrum;
  }

  float DenseSpectrum::InnerProduct(const DenseSpectrum& f, const DenseSpectrum& g)
  {
    float integral{};
    for( int i{}; i < kSampleCount; ++i)
        integral += f.mValues[i] * g.mValues[i];
    return integral;
}

  const DenseSpectrum XYZ::X
  {
    0.00012f, 0.00014f, 0.00016f, 0.00018f, 0.00020f, 0.00023f, 0.00026f, 0.00029f, 0.00032f, 0.00036f,
    0.00041f, 0.00046f, 0.00051f, 0.00058f, 0.00065f, 0.00074f, 0.00084f, 0.00096f, 0.00109f, 0.00123f,
    0.00136f, 0.00150f, 0.00164f, 0.00180f, 0.00199f, 0.00223f, 0.00253f, 0.00289f, 0.00330f, 0.00375f,
    0.00424f, 0.00476f, 0.00533f, 0.00597f, 0.00674f, 0.00765f, 0.00875f, 0.01002f, 0.01142f, 0.01286f,
    0.01431f, 0.01570f, 0.01714f, 0.01878f, 0.02074f, 0.02319f, 0.02620f, 0.02978f, 0.03388f, 0.03846f,
    0.04351f, 0.04899f, 0.05502f, 0.06171f, 0.06921f, 0.07763f, 0.08695f, 0.09717f, 0.10840f, 0.12076f,
    0.13438f, 0.14935f, 0.16539f, 0.18198f, 0.19861f, 0.21477f, 0.23018f, 0.24487f, 0.25877f, 0.27180f,
    0.28390f, 0.29494f, 0.30489f, 0.31378f, 0.32164f, 0.32850f, 0.33435f, 0.33921f, 0.34312f, 0.34612f,
    0.34828f, 0.34959f, 0.35014f, 0.35001f, 0.34928f, 0.34806f, 0.34637f, 0.34426f, 0.34180f, 0.33909f,
    0.33620f, 0.33319f, 0.33004f, 0.32663f, 0.32288f, 0.31870f, 0.31402f, 0.30888f, 0.30329f, 0.29725f,
    0.29080f, 0.28397f, 0.27672f, 0.26891f, 0.26042f, 0.25110f, 0.24084f, 0.22985f, 0.21840f, 0.20681f,
    0.19536f, 0.18421f, 0.17332f, 0.16268f, 0.15228f, 0.14210f, 0.13217f, 0.12256f, 0.11327f, 0.10429f,
    0.09564f, 0.08729f, 0.07930f, 0.07171f, 0.06458f, 0.05795f, 0.05186f, 0.04628f, 0.04115f, 0.03641f,
    0.03201f, 0.02791f, 0.02414f, 0.02068f, 0.01754f, 0.01470f, 0.01216f, 0.00991f, 0.00796f, 0.00629f,
    0.00490f, 0.00377f, 0.00294f, 0.00242f, 0.00223f, 0.00240f, 0.00292f, 0.00383f, 0.00517f, 0.00698f,
    0.00930f, 0.01214f, 0.01553f, 0.01947f, 0.02399f, 0.02910f, 0.03481f, 0.04112f, 0.04798f, 0.05537f,
    0.06327f, 0.07163f, 0.08046f, 0.08973f, 0.09945f, 0.10960f, 0.12016f, 0.13111f, 0.14236f, 0.15385f,
    0.16550f, 0.17725f, 0.18914f, 0.20116f, 0.21336f, 0.22574f, 0.23832f, 0.25106f, 0.26399f, 0.27710f,
    0.29040f, 0.30389f, 0.31757f, 0.33143f, 0.34548f, 0.35970f, 0.37408f, 0.38863f, 0.40337f, 0.41831f,
    0.43344f, 0.44879f, 0.46433f, 0.48006f, 0.49597f, 0.51205f, 0.52829f, 0.54469f, 0.56120f, 0.57782f,
    0.59450f, 0.61122f, 0.62797f, 0.64476f, 0.66156f, 0.67840f, 0.69523f, 0.71205f, 0.72882f, 0.74551f,
    0.76210f, 0.77854f, 0.79482f, 0.81092f, 0.82682f, 0.84250f, 0.85793f, 0.87308f, 0.88789f, 0.90231f,
    0.91630f, 0.92979f, 0.94279f, 0.95527f, 0.96721f, 0.97860f, 0.98938f, 0.99954f, 1.00908f, 1.01800f,
    1.02630f, 1.03398f, 1.04098f, 1.04718f, 1.05246f, 1.05670f, 1.05979f, 1.06179f, 1.06280f, 1.06290f,
    1.06220f, 1.06073f, 1.05844f, 1.05522f, 1.05097f, 1.04560f, 1.03903f, 1.03136f, 1.02266f, 1.01304f,
    1.00260f, 0.99136f, 0.97933f, 0.96649f, 0.95284f, 0.93840f, 0.92319f, 0.90724f, 0.89050f, 0.87292f,
    0.85444f, 0.83508f, 0.81494f, 0.79418f, 0.77295f, 0.75140f, 0.72958f, 0.70758f, 0.68560f, 0.66381f,
    0.64240f, 0.62151f, 0.60111f, 0.58110f, 0.56139f, 0.54190f, 0.52259f, 0.50354f, 0.48474f, 0.46619f,
    0.44790f, 0.42986f, 0.41209f, 0.39464f, 0.37753f, 0.36080f, 0.34445f, 0.32851f, 0.31301f, 0.29800f,
    0.28350f, 0.26954f, 0.25611f, 0.24318f, 0.23072f, 0.21870f, 0.20709f, 0.19592f, 0.18517f, 0.17483f,
    0.16490f, 0.15536f, 0.14623f, 0.13749f, 0.12914f, 0.12120f, 0.11363f, 0.10646f, 0.09969f, 0.09333f,
    0.08740f, 0.08190f, 0.07680f, 0.07207f, 0.06768f, 0.06360f, 0.05980f, 0.05628f, 0.05297f, 0.04981f,
    0.04677f, 0.04378f, 0.04087f, 0.03807f, 0.03540f, 0.03290f, 0.03056f, 0.02838f, 0.02634f, 0.02445f,
    0.02270f, 0.02108f, 0.01959f, 0.01823f, 0.01698f, 0.01584f, 0.01479f, 0.01383f, 0.01294f, 0.01212f,
    0.01135f, 0.01062f, 0.00993f, 0.00928f, 0.00867f, 0.00811f, 0.00758f, 0.00708f, 0.00662f, 0.00619f,
    0.00579f, 0.00540f, 0.00505f, 0.00471f, 0.00440f, 0.00410f, 0.00383f, 0.00357f, 0.00333f, 0.00310f,
    0.00289f, 0.00270f, 0.00252f, 0.00235f, 0.00219f, 0.00204f, 0.00191f, 0.00178f, 0.00166f, 0.00154f,
    0.00143f, 0.00134f, 0.00124f, 0.00115f, 0.00107f, 0.00099f, 0.00092f, 0.00086f, 0.00080f, 0.00074f,
    0.00069f, 0.00064f, 0.00059f, 0.00055f, 0.00051f, 0.00047f, 0.00044f, 0.00041f, 0.00038f, 0.00035f,
    0.00033f, 0.00030f, 0.00028f, 0.00026f, 0.00025f, 0.00023f, 0.00021f, 0.00020f, 0.00019f, 0.00017f,
    0.00016f, 0.00015f, 0.00014f, 0.00013f, 0.00012f, 0.00011f, 0.00010f, 0.00010f, 0.00009f, 0.00008f,
    0.00008f, 0.00007f, 0.00007f, 0.00006f, 0.00006f, 0.00005f, 0.00005f, 0.00005f, 0.00004f, 0.00004f,
    0.00004f, 0.00003f, 0.00003f, 0.00003f, 0.00003f, 0.00002f, 0.00002f, 0.00002f, 0.00002f, 0.00002f,
    0.00002f, 0.00001f, 0.00001f, 0.00001f, 0.00001f, 0.00001f, 0.00001f, 0.00001f, 0.00001f, 0.00001f,
    0.00001f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f
  };

  const DenseSpectrum XYZ::Y
  {
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00001f,
    0.00001f, 0.00001f, 0.00001f, 0.00001f, 0.00001f, 0.00002f, 0.00002f, 0.00002f, 0.00003f, 0.00003f,
    0.00003f, 0.00004f, 0.00004f, 0.00005f, 0.00005f, 0.00006f, 0.00007f, 0.00008f, 0.00009f, 0.00010f,
    0.00012f, 0.00013f, 0.00015f, 0.00017f, 0.00019f, 0.00021f, 0.00024f, 0.00028f, 0.00031f, 0.00035f,
    0.00039f, 0.00043f, 0.00047f, 0.00051f, 0.00057f, 0.00064f, 0.00072f, 0.00082f, 0.00094f, 0.00106f,
    0.00121f, 0.00136f, 0.00153f, 0.00172f, 0.00193f, 0.00218f, 0.00245f, 0.00276f, 0.00311f, 0.00352f,
    0.00400f, 0.00454f, 0.00515f, 0.00582f, 0.00654f, 0.00730f, 0.00808f, 0.00890f, 0.00976f, 0.01066f,
    0.01160f, 0.01257f, 0.01358f, 0.01462f, 0.01571f, 0.01684f, 0.01800f, 0.01921f, 0.02045f, 0.02171f,
    0.02300f, 0.02429f, 0.02561f, 0.02695f, 0.02835f, 0.02980f, 0.03131f, 0.03288f, 0.03452f, 0.03622f,
    0.03800f, 0.03984f, 0.04176f, 0.04376f, 0.04584f, 0.04800f, 0.05024f, 0.05257f, 0.05498f, 0.05745f,
    0.06000f, 0.06260f, 0.06527f, 0.06804f, 0.07091f, 0.07390f, 0.07701f, 0.08026f, 0.08366f, 0.08723f,
    0.09098f, 0.09491f, 0.09904f, 0.10336f, 0.10788f, 0.11260f, 0.11753f, 0.12267f, 0.12799f, 0.13345f,
    0.13902f, 0.14467f, 0.15046f, 0.15646f, 0.16271f, 0.16930f, 0.17624f, 0.18355f, 0.19127f, 0.19941f,
    0.20802f, 0.21711f, 0.22673f, 0.23685f, 0.24748f, 0.25860f, 0.27018f, 0.28229f, 0.29505f, 0.30857f,
    0.32300f, 0.33840f, 0.35468f, 0.37169f, 0.38928f, 0.40730f, 0.42562f, 0.44430f, 0.46339f, 0.48293f,
    0.50300f, 0.52356f, 0.54451f, 0.56569f, 0.58696f, 0.60820f, 0.62934f, 0.65030f, 0.67087f, 0.69084f,
    0.71000f, 0.72818f, 0.74546f, 0.76196f, 0.77783f, 0.79320f, 0.80811f, 0.82249f, 0.83630f, 0.84949f,
    0.86200f, 0.87381f, 0.88496f, 0.89549f, 0.90544f, 0.91485f, 0.92373f, 0.93209f, 0.93992f, 0.94722f,
    0.95400f, 0.96025f, 0.96600f, 0.97126f, 0.97602f, 0.98030f, 0.98409f, 0.98748f, 0.99031f, 0.99281f,
    0.99495f, 0.99671f, 0.99809f, 0.99911f, 0.99974f, 1.00000f, 0.99985f, 0.99930f, 0.99832f, 0.99689f,
    0.99500f, 0.99260f, 0.98974f, 0.98644f, 0.98272f, 0.97860f, 0.97408f, 0.96917f, 0.96385f, 0.95813f,
    0.95200f, 0.94545f, 0.93849f, 0.93116f, 0.92345f, 0.91540f, 0.90700f, 0.89827f, 0.88920f, 0.87978f,
    0.87000f, 0.85986f, 0.84939f, 0.83862f, 0.82758f, 0.81630f, 0.80479f, 0.79308f, 0.78119f, 0.76915f,
    0.75700f, 0.74475f, 0.73242f, 0.72000f, 0.70749f, 0.69490f, 0.68221f, 0.66947f, 0.65667f, 0.64384f,
    0.63100f, 0.61815f, 0.60531f, 0.59247f, 0.57963f, 0.56680f, 0.55396f, 0.54113f, 0.52835f, 0.51563f,
    0.50300f, 0.49046f, 0.47803f, 0.46567f, 0.45340f, 0.44120f, 0.42908f, 0.41703f, 0.40503f, 0.39303f,
    0.38100f, 0.36891f, 0.35682f, 0.34477f, 0.33281f, 0.32100f, 0.30933f, 0.29785f, 0.28659f, 0.27562f,
    0.26500f, 0.25476f, 0.24488f, 0.23533f, 0.22605f, 0.21700f, 0.20816f, 0.19954f, 0.19115f, 0.18297f,
    0.17500f, 0.16722f, 0.15964f, 0.15227f, 0.14512f, 0.13820f, 0.13150f, 0.12502f, 0.11877f, 0.11276f,
    0.10700f, 0.10147f, 0.09618f, 0.09112f, 0.08626f, 0.08160f, 0.07712f, 0.07282f, 0.06871f, 0.06476f,
    0.06100f, 0.05739f, 0.05395f, 0.05067f, 0.04754f, 0.04458f, 0.04175f, 0.03908f, 0.03656f, 0.03420f,
    0.03200f, 0.02996f, 0.02807f, 0.02632f, 0.02470f, 0.02320f, 0.02180f, 0.02050f, 0.01928f, 0.01812f,
    0.01700f, 0.01590f, 0.01483f, 0.01381f, 0.01283f, 0.01192f, 0.01106f, 0.01027f, 0.00953f, 0.00884f,
    0.00821f, 0.00762f, 0.00708f, 0.00659f, 0.00613f, 0.00572f, 0.00534f, 0.00499f, 0.00467f, 0.00438f,
    0.00410f, 0.00383f, 0.00358f, 0.00335f, 0.00313f, 0.00292f, 0.00273f, 0.00255f, 0.00239f, 0.00223f,
    0.00209f, 0.00195f, 0.00182f, 0.00170f, 0.00159f, 0.00148f, 0.00138f, 0.00129f, 0.00120f, 0.00112f,
    0.00104f, 0.00097f, 0.00091f, 0.00085f, 0.00079f, 0.00074f, 0.00069f, 0.00064f, 0.00059f, 0.00055f,
    0.00052f, 0.00048f, 0.00045f, 0.00041f, 0.00038f, 0.00036f, 0.00033f, 0.00031f, 0.00028f, 0.00026f,
    0.00024f, 0.00023f, 0.00021f, 0.00019f, 0.00018f, 0.00017f, 0.00015f, 0.00014f, 0.00013f, 0.00012f,
    0.00012f, 0.00011f, 0.00010f, 0.00009f, 0.00009f, 0.00008f, 0.00007f, 0.00007f, 0.00006f, 0.00006f,
    0.00006f, 0.00005f, 0.00005f, 0.00004f, 0.00004f, 0.00004f, 0.00003f, 0.00003f, 0.00003f, 0.00003f,
    0.00003f, 0.00002f, 0.00002f, 0.00002f, 0.00002f, 0.00002f, 0.00001f, 0.00001f, 0.00001f, 0.00001f,
    0.00001f, 0.00001f, 0.00001f, 0.00001f, 0.00001f, 0.00001f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f };

  const DenseSpectrum XYZ::Z
  {
    0.00060f, 0.00068f, 0.00076f, 0.00086f, 0.00096f, 0.00108f, 0.00122f, 0.00137f, 0.00154f, 0.00173f,
    0.00194f, 0.00217f, 0.00243f, 0.00273f, 0.00307f, 0.00348f, 0.00397f, 0.00454f, 0.00515f, 0.00580f,
    0.00645f, 0.00708f, 0.00774f, 0.00850f, 0.00941f, 0.01054f, 0.01196f, 0.01365f, 0.01558f, 0.01773f,
    0.02005f, 0.02251f, 0.02520f, 0.02827f, 0.03189f, 0.03621f, 0.04143f, 0.04750f, 0.05411f, 0.06099f,
    0.06785f, 0.07448f, 0.08136f, 0.08915f, 0.09854f, 0.11020f, 0.12461f, 0.14170f, 0.16130f, 0.18325f,
    0.20740f, 0.23369f, 0.26261f, 0.29477f, 0.33079f, 0.37130f, 0.41620f, 0.46546f, 0.51969f, 0.57953f,
    0.64560f, 0.71848f, 0.79671f, 0.87784f, 0.95943f, 1.03905f, 1.11536f, 1.18849f, 1.25812f, 1.32392f,
    1.38560f, 1.44263f, 1.49480f, 1.54219f, 1.58488f, 1.62296f, 1.65640f, 1.68529f, 1.70987f, 1.73038f,
    1.74706f, 1.76004f, 1.76962f, 1.77626f, 1.78043f, 1.78260f, 1.78296f, 1.78169f, 1.77919f, 1.77586f,
    1.77211f, 1.76825f, 1.76403f, 1.75894f, 1.75246f, 1.74410f, 1.73355f, 1.72085f, 1.70593f, 1.68873f,
    1.66920f, 1.64752f, 1.62341f, 1.59602f, 1.56452f, 1.52810f, 1.48611f, 1.43952f, 1.38987f, 1.33873f,
    1.28764f, 1.23742f, 1.18782f, 1.13876f, 1.09014f, 1.04190f, 0.99419f, 0.94734f, 0.90145f, 0.85661f,
    0.81295f, 0.77051f, 0.72944f, 0.68991f, 0.65210f, 0.61620f, 0.58232f, 0.55041f, 0.52033f, 0.49196f,
    0.46518f, 0.43992f, 0.41618f, 0.39388f, 0.37294f, 0.35330f, 0.33485f, 0.31755f, 0.30133f, 0.28616f,
    0.27200f, 0.25881f, 0.24648f, 0.23477f, 0.22345f, 0.21230f, 0.20116f, 0.19011f, 0.17922f, 0.16856f,
    0.15820f, 0.14813f, 0.13837f, 0.12899f, 0.12007f, 0.11170f, 0.10390f, 0.09666f, 0.08998f, 0.08384f,
    0.07824f, 0.07320f, 0.06867f, 0.06456f, 0.06078f, 0.05725f, 0.05390f, 0.05074f, 0.04775f, 0.04489f,
    0.04216f, 0.03950f, 0.03693f, 0.03445f, 0.03208f, 0.02984f, 0.02771f, 0.02569f, 0.02378f, 0.02198f,
    0.02030f, 0.01871f, 0.01724f, 0.01586f, 0.01458f, 0.01340f, 0.01230f, 0.01130f, 0.01037f, 0.00952f,
    0.00874f, 0.00803f, 0.00738f, 0.00678f, 0.00624f, 0.00574f, 0.00530f, 0.00489f, 0.00453f, 0.00420f,
    0.00390f, 0.00362f, 0.00337f, 0.00314f, 0.00293f, 0.00274f, 0.00258f, 0.00243f, 0.00230f, 0.00219f,
    0.00210f, 0.00201f, 0.00194f, 0.00188f, 0.00184f, 0.00180f, 0.00176f, 0.00173f, 0.00171f, 0.00168f,
    0.00165f, 0.00161f, 0.00156f, 0.00151f, 0.00145f, 0.00140f, 0.00133f, 0.00127f, 0.00120f, 0.00114f,
    0.00110f, 0.00106f, 0.00104f, 0.00103f, 0.00102f, 0.00100f, 0.00096f, 0.00092f, 0.00088f, 0.00084f,
    0.00080f, 0.00076f, 0.00072f, 0.00068f, 0.00064f, 0.00060f, 0.00054f, 0.00049f, 0.00043f, 0.00038f,
    0.00034f, 0.00030f, 0.00028f, 0.00026f, 0.00025f, 0.00024f, 0.00022f, 0.00022f, 0.00021f, 0.00020f,
    0.00019f, 0.00017f, 0.00015f, 0.00013f, 0.00011f, 0.00010f, 0.00008f, 0.00007f, 0.00006f, 0.00005f,
    0.00004f, 0.00004f, 0.00003f, 0.00003f, 0.00003f, 0.00003f, 0.00002f, 0.00002f, 0.00002f, 0.00002f,
    0.00002f, 0.00001f, 0.00001f, 0.00001f, 0.00001f, 0.00001f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f,
    0.00000f
  };

  XYZ DenseSpectrum::ToXYZ() const
  {
    constexpr float scale{ 1 / XYZ::YIntegral };
    const float x{ scale * InnerProduct( XYZ::X, *this ) };
    const float y{ scale * InnerProduct( XYZ::Y, *this ) };
    const float z{ scale * InnerProduct( XYZ::Z, *this ) };
    return { x, y, z };
  }

} // namespace Tac

