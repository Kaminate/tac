
#pragma once
#include "src/space/tacSpacetypes.h"
#include "src/space/tacSpacenet.h"
#include "src/common/containers/tacVector.h"
#include <list>
#include <map>

namespace Tac
{
  struct OtherPlayer
  {
    // A unique ID per players
    // ( both client players and server player ).
    // Generated by the server
    PlayerUUID mPlayerUUID = NullPlayerUUID;
    // Last acknowledged
    double mTimeStamp = 0;
    LagTest delayedNetMsg;
    ConnectionUUID mConnectionUUID = NullConnectionUUID;
  };

  typedef void( *ServerSendNetworkMessageCallback )(
    ConnectionUUID connectionID,
    void* bytes,
    int byteCount,
    void* userData );

  struct Reader;
  struct Writer;
  struct World;
  struct Entity;
  struct Player;
  struct User;
  struct ScriptRoot;

  struct ServerData
  {
    ServerData();
    ~ServerData();
    Entity* SpawnEntity();
    Player* SpawnPlayer();
    void OnClientJoin( ConnectionUUID connectionID );
    void DebugImgui();
    OtherPlayer* FindOtherPlayer( ConnectionUUID connectionID );
    void ReceiveMessage(
      ConnectionUUID connectionID,
      void* bytes,
      int byteCount,
      Errors& errors );
    void Update(
      float seconds,
      ServerSendNetworkMessageCallback sendNetworkMessageCallback,
      void* userData,
      Errors& errors );

    void OnLoseClient( ConnectionUUID connectionID );

    void ReadInput(
      Reader* reader,
      ConnectionUUID connectionID,
      Errors& errors );

    void WriteSnapshotBody( OtherPlayer* otherPlayer, Writer* writer );

    void ExecuteNetMsg(
      ConnectionUUID connectionID,
      void* bytes,
      int byteCount,
      Errors& errors );

    SnapshotBuffer mSnapshots;
    float mSnapshotUntilNextSecondsCur = 0;
    //Chat mChat;
    World* mWorld = nullptr;
    World* mEmptyWorld = nullptr;
    static const int sOtherPlayerCountMax = 3;
    std::list< OtherPlayer* > mOtherPlayers;
    PlayerUUID mPlayerUUIDCounter = NullPlayerUUID;
    EntityUUID mEntityUUIDCounter = NullEntityUUID;
    //User* mUser = nullptr;
  };

  extern const float sSnapshotUntilNextSecondsMax;


}

