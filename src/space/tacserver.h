
#pragma once
#include "src/space/tacSpacetypes.h"
#include "src/space/tacSpacenet.h"
#include "src/common/containers/tacVector.h"
#include <list>
#include <map>

namespace Tac
{
  struct OtherPlayer
  {
    // A unique ID per players
    // ( both client players and server player ).
    // Generated by the server
    PlayerUUID     mPlayerUUID = NullPlayerUUID;
    // Last acknowledged
    double         mTimeStamp = 0;
    LagTest        delayedNetMsg;
    ConnectionUUID mConnectionUUID = NullConnectionUUID;
  };

  typedef void( *ServerSendNetworkMessageCallback )( ConnectionUUID,
                                                     void* bytes,
                                                     int byteCount,
                                                     void* userData );

  struct Reader;
  struct Writer;
  struct World;
  struct Entity;
  struct Player;
  struct User;
  struct ScriptRoot;

  struct ServerData
  {
    ServerData();
    ~ServerData();
    Entity*                   SpawnEntity();
    Player*                   SpawnPlayer();
    void                      OnClientJoin( ConnectionUUID );
    void                      DebugImgui();
    OtherPlayer*              FindOtherPlayer( ConnectionUUID );
    void                      ReceiveMessage( ConnectionUUID,
                                              void* bytes,
                                              int byteCount,
                                              Errors& );
    void                      Update( float seconds,
                                      ServerSendNetworkMessageCallback,
                                      void* userData,
                                      Errors& );
    void                      OnLoseClient( ConnectionUUID );
    void                      ReadInput( Reader*,
                                         ConnectionUUID,
                                         Errors& );
    void                      WriteSnapshotBody( OtherPlayer*, Writer* );
    void                      ExecuteNetMsg( ConnectionUUID,
                                             void* bytes,
                                             int byteCount,
                                             Errors& );
    SnapshotBuffer            mSnapshots;
    float                     mSnapshotUntilNextSecondsCur = 0;
    World*                    mWorld = nullptr;
    World*                    mEmptyWorld = nullptr;
    static const int          sOtherPlayerCountMax = 3;
    std::list< OtherPlayer* > mOtherPlayers;
    //PlayerUUID                mPlayerUUIDCounter = NullPlayerUUID;
    //EntityUUID                mEntityUUIDCounter = NullEntityUUID;
    PlayerUUIDCounter         mPlayerUUIDCounter;
    EntityUUIDCounter         mEntityUUIDCounter;
  };

  extern const float sSnapshotUntilNextSecondsMax;


}

