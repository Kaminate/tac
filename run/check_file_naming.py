# The purpose of this file is to keep filename case-sensitivity
# consistent between windows and linux (by brutishly forcing
# everything to be lowercase)

import tac_utils
import os

print( 'tac root:', tac_utils.tac_root )

def ensure_prefix( filename ):
  if not filename.startswith( 'tac' ):
    filename = 'tac_' + filename
  return filename

def ensure_lowercase( filename ):
  filename_new = ''
  for c in filename:
     if c.isupper():
       filename_new += '_' + c.lower()
     else:
       filename_new += c
  return filename_new

def process_file( dirpath, filename ):
      cur_file_path = os.path.join( dirpath, filename )
      root, ext = os.path.splitext(filename)
      is_source_file = ( ext == '.cpp' or ext == '.h' )
      if not is_source_file:
        return

      filename_new = filename
      filename_new = ensure_prefix( filename_new )
      filename_new = ensure_lowercase( filename_new )

      if filename_new == filename:
        return

      print( 'changing ', cur_file_path, 'to', filename_new )
      new_file_path = os.path.join( dirpath, filename_new )
      os.rename( cur_file_path, new_file_path )

def process_files():
  tac_src = os.path.join( tac_utils.tac_root, 'src' )
  print( 'recursively processing files in:', tac_src )
  print( '\n--- begin file processing' )
  for dirpath, dirnames, filenames in os.walk( tac_src ):

      # hmm...
      is_external = False
      is_external |= 'thirdparty' in dirpath 
      is_external |= 'autogenerated' in dirpath
      if is_external:
         continue

      for filename in filenames:
        process_file( dirpath, filename )

  print( '--- end file processing\n' )

process_files()

